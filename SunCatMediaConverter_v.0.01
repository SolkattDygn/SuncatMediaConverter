#!/bin/bash

# === SunCat ASCII art and license info ===
print_suncat() {
  cat << "EOF"
      |\_/|        ☀ Suncat Media Converter
     /     \       -------------------
    /_.~ ~,_\      Converts MP4 or MKV
   (  =^.^=  )     with audio in PCM, AAC, MP3, Opus, FLAC, OGG!
   (")_____(")

EOF
  echo "Created by : SolkattDygn"
  echo "License    : GNU General Public License v3.0"
  echo "Website    : https://github.com/SolkattDygn"
  echo
}

# Variables for user choices
input_choice=""
input_ext=""
av_choice=""
audio_format_choice=""
audio_codec=""
ext=""
bitrate=""
container_choice=""
output_ext=""
audio_choice=""
fmt=""

output_dir="converted"

print_ui() {
  clear
  print_suncat

  echo "--------------------------------------------------------------------------------"

  breadcrumb="Input: "
  if [[ -n "$input_choice" ]]; then
    breadcrumb+=".$input_ext"
  else
    breadcrumb+="(none)"
  fi

  if [[ -n "$av_choice" ]]; then
    if [[ "$av_choice" == "1" ]]; then
      breadcrumb+=" | Convert: Audio only"
      if [[ -n "$audio_format_choice" ]]; then
        case "$audio_format_choice" in
          1) fmt="MP3" ;;
          2) fmt="AAC" ;;
          3) fmt="WAV" ;;
          4) fmt="Opus" ;;
          5) fmt="FLAC" ;;
          6) fmt="OGG Vorbis" ;;
          *) fmt="Unknown" ;;
        esac
        breadcrumb+=" | Audio format: $fmt"
      fi
      if [[ -n "$bitrate" ]]; then
        breadcrumb+=" | Bitrate: $bitrate"
      fi
    else
      breadcrumb+=" | Convert: Video + Audio"
      if [[ -n "$container_choice" ]]; then
        breadcrumb+=" | Container: .$output_ext"
      fi
      if [[ -n "$audio_choice" ]]; then
        case "$audio_choice" in
          1) breadcrumb+=" | Audio codec: PCM" ;;
          2) breadcrumb+=" | Audio codec: AAC" ;;
          3) breadcrumb+=" | Audio codec: MP3" ;;
          4) breadcrumb+=" | Audio codec: Opus" ;;
          5) breadcrumb+=" | Audio codec: FLAC" ;;
          6) breadcrumb+=" | Audio codec: OGG Vorbis" ;;
        esac
      fi
    fi
  else
    breadcrumb+=" | Convert: (none)"
  fi

  echo "$breadcrumb"
  echo "--------------------------------------------------------------------------------"
  echo ""
}

# Function to check for input files and list them
list_input_files() {
  shopt -s nullglob
  files=( *."$input_ext" )
  shopt -u nullglob

  if [[ ${#files[@]} -eq 0 ]]; then
    echo "No input files with extension .$input_ext found in current directory."
    return 1
  else
    echo "Found input files:"
    for f in "${files[@]}"; do
      echo " - $f"
    done
    echo ""
    return 0
  fi
}

print_ui
step=1

while true; do
  case $step in
    1)
      print_ui
      echo "Choose input file type:"
      echo "1) .mp4"
      echo "2) .mkv"
      read -rp "Enter 1 or 2 (or 'b' to go back): " input_choice
      if [[ "$input_choice" =~ ^[bB]$ ]]; then
        echo "This is the first step, can't go back."
        sleep 1
      elif [[ "$input_choice" == "1" || "$input_choice" == "2" ]]; then
        input_ext="mp4"
        [[ "$input_choice" == "2" ]] && input_ext="mkv"

        # Check for input files
        if ! list_input_files; then
          echo "Please add .$input_ext files to the current directory and try again."
          sleep 2
          continue
        fi

        step=$((step+1))
      else
        echo "Invalid input. Please enter 1 or 2."
        sleep 1
      fi
      ;;
    2)
      print_ui
      echo "Convert:"
      echo "1) Audio only (extract audio and convert)"
      echo "2) Video + Audio (keep video, convert audio)"
      read -rp "Enter 1 or 2 (or 'b' to go back): " av_choice
      if [[ "$av_choice" =~ ^[bB]$ ]]; then
        step=$((step-1))
      elif [[ "$av_choice" == "1" || "$av_choice" == "2" ]]; then
        step=$((step+1))
      else
        echo "Invalid input. Please enter 1 or 2."
        sleep 1
      fi
      ;;
    3)
      print_ui
      if [[ "$av_choice" == "1" ]]; then
        echo "Choose audio format:"
        echo "1) MP3 (lossy, popular)"
        echo "2) AAC (lossy, better at low bitrate)"
        echo "3) WAV (lossless PCM)"
        echo "4) Opus (modern lossy)"
        echo "5) FLAC (lossless compressed)"
        echo "6) OGG Vorbis (open lossy)"
        read -rp "Enter 1-6 (or 'b' to go back): " audio_format_choice
        if [[ "$audio_format_choice" =~ ^[bB]$ ]]; then
          step=$((step-1))
        elif [[ "$audio_format_choice" =~ ^[1-6]$ ]]; then
          case "$audio_format_choice" in
            1) audio_codec="libmp3lame"; ext="mp3" ;;
            2) audio_codec="aac"; ext="m4a" ;;
            3) audio_codec="pcm_s16le"; ext="wav" ;;
            4) audio_codec="libopus"; ext="opus" ;;
            5) audio_codec="flac"; ext="flac" ;;
            6) audio_codec="libvorbis"; ext="ogg" ;;
          esac
          step=$((step+1))
        else
          echo "Invalid input. Please enter 1-6."
          sleep 1
        fi
      else
        echo "Choose output container format:"
        echo "1) .mp4"
        echo "2) .mkv"
        read -rp "Enter 1 or 2 (or 'b' to go back): " container_choice
        if [[ "$container_choice" =~ ^[bB]$ ]]; then
          step=$((step-1))
        elif [[ "$container_choice" == "1" || "$container_choice" == "2" ]]; then
          output_ext="mp4"
          [[ "$container_choice" == "2" ]] && output_ext="mkv"
          step=$((step+1))
        else
          echo "Invalid input. Please enter 1 or 2."
          sleep 1
        fi
      fi
      ;;
    4)
      print_ui
      if [[ "$av_choice" == "1" ]]; then
        if [[ "$audio_codec" == "libmp3lame" || "$audio_codec" == "aac" || "$audio_codec" == "libopus" || "$audio_codec" == "libvorbis" ]]; then
          read -rp "Choose bitrate (e.g. 128k, 192k, 256k, 320k) or 'b' to go back: " bitrate
          if [[ "$bitrate" =~ ^[bB]$ ]]; then
            step=$((step-1))
          elif [[ "$bitrate" =~ ^[0-9]{2,3}k$ ]]; then
            step=$((step+1))
          else
            echo "Invalid bitrate format."
            sleep 1
          fi
        else
          # No bitrate needed for PCM, FLAC
          step=$((step+1))
        fi
      else
        echo "Choose audio codec:"
        if [[ "$output_ext" == "mp4" ]]; then
          echo "1) PCM (lossless)"
          echo "2) AAC (compressed)"
          echo "3) MP3 (lossy, popular)"
          read -rp "Enter 1-3 (or 'b' to go back): " audio_choice
          if [[ "$audio_choice" =~ ^[bB]$ ]]; then
            step=$((step-1))
          elif [[ "$audio_choice" =~ ^[1-3]$ ]]; then
            case "$audio_choice" in
              1) audio_codec="pcm_s16le" ;;
              2) audio_codec="aac" ;;
              3) audio_codec="libmp3lame" ;;
            esac
            step=$((step+1))
          else
            echo "Invalid input. Please enter 1-3."
            sleep 1
          fi
        else
          echo "1) PCM (lossless)"
          echo "2) AAC (compressed)"
          echo "3) MP3 (lossy, popular)"
          echo "4) Opus (modern lossy)"
          echo "5) FLAC (lossless compressed)"
          echo "6) OGG Vorbis (open lossy)"
          read -rp "Enter 1-6 (or 'b' to go back): " audio_choice
          if [[ "$audio_choice" =~ ^[bB]$ ]]; then
            step=$((step-1))
          elif [[ "$audio_choice" =~ ^[1-6]$ ]]; then
            case "$audio_choice" in
              1) audio_codec="pcm_s16le" ;;
              2) audio_codec="aac" ;;
              3) audio_codec="libmp3lame" ;;
              4) audio_codec="libopus" ;;
              5) audio_codec="flac" ;;
              6) audio_codec="libvorbis" ;;
            esac
            step=$((step+1))
          else
            echo "Invalid input. Please enter 1-6."
            sleep 1
          fi
        fi
      fi
      ;;
    5)
      print_ui
      echo "Starting conversion..."
      mkdir -p "$output_dir"

      shopt -s nullglob
      files=( *."$input_ext" )
      shopt -u nullglob

      if [[ ${#files[@]} -eq 0 ]]; then
        echo "No input files found for conversion. Returning to step 1."
        sleep 2
        step=1
        continue
      fi

      for input_file in "${files[@]}"; do
        base_name="${input_file%.*}"

        if [[ "$av_choice" == "1" ]]; then
          output_file="${output_dir}/${base_name}_converted.${ext}"
          echo "Converting audio only: $input_file → $output_file"

          if [[ "$audio_codec" == "pcm_s16le" ]]; then
            # PCM WAV output, no bitrate
            ffmpeg -nostdin -i "$input_file" -vn -acodec "$audio_codec" "$output_file"
          elif [[ "$audio_codec" == "flac" || "$audio_codec" == "libopus" || "$audio_codec" == "libvorbis" ]]; then
            # Lossless or lossy codecs without bitrate arg
            ffmpeg -nostdin -i "$input_file" -vn -acodec "$audio_codec" "$output_file"
          else
            # lossy codecs with bitrate arg
            ffmpeg -nostdin -i "$input_file" -vn -acodec "$audio_codec" -b:a "$bitrate" "$output_file"
          fi

          if [[ $? -eq 0 ]]; then
            echo "Successfully converted $input_file"
          else
            echo "Failed to convert $input_file"
          fi

        else
          output_file="${output_dir}/${base_name}_converted.${output_ext}"
          echo "Converting video + audio: $input_file → $output_file"

          # For video+audio, copy video, re-encode audio
          ffmpeg -nostdin -i "$input_file" -c:v copy -c:a "$audio_codec" "$output_file"

          if [[ $? -eq 0 ]]; then
            echo "✅ Successfully converted $input_file"
          else
            echo "Failed to convert $input_file"
          fi
        fi
      done

      echo ""
      echo "All conversions done."
      echo "Converted files are in the '$output_dir' folder."
      echo ""
      read -rp "Press Enter to exit..."
      exit 0
      ;;
    *)
      echo "Invalid step"
      exit 1
      ;;
  esac
done

